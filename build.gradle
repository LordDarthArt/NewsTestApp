import java.util.regex.Matcher
import java.util.regex.Pattern

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        gradle_version = '3.6.3'
        kotlin_version = '1.3.72'

        // SDK Versions
        target_sdk_version = 29
        build_tools_version = '29.0.2'
        min_sdk_version = 21

        // Testing
        junit_version = '4.13'
        android_junit_version = '1.1.1'
        espresso_version = '3.2.0'

        // Android Native Stuff
        material_version = '1.2.0-alpha06'
        appcompat_version = '1.1.0'
        androidx_core_version = '1.4.0-alpha01'
        legacy_support_version = '1.0.0'
        androidx_preference_version = '1.1.1'
        androidx_core_version = '1.4.0-alpha01'
        legacy_support_version = '1.0.0'
        androidx_preference_version = '1.1.1'
        webkit_version = '1.2.0'
        recycler_view_version = '1.1.0'
        constraint_layout_version = '2.0.0-beta6'

        // Glide
        glide_version = '4.11.0'

        // Retrofit
        retrofit_version = '2.9.0'

        // OkHttp
        ok_http_version = '4.7.2'

        // DataBinding Library
        databinding_library_version = '3.2.0-alpha10'

        // Room
        room_version = '2.2.5'

        // Moxy-X
        moxy_x_version = '1.7.0'

        // Rx
        rx_version = '3.0.3'
        rx_android_version = '3.0.0'

        // Dagger
        dagger_version = '2.27'
    }

    def versionPatchAndNumber = 0

    ext.getCurrentFlavor = { ->
        Gradle gradle = getGradle()
        String tskReqStr = gradle.getStartParameter().getTaskRequests().toString()

        Pattern pattern

        if (tskReqStr.contains("assemble"))
            pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
        else
            pattern = Pattern.compile("generate(\\w+)(Release|Debug)")

        Matcher matcher = pattern.matcher(tskReqStr)

        if (matcher.find())
            return matcher.group(1).toLowerCase()
        else {
            println "NO MATCH FOUND"
            return ""
        }
    }

    def versionPropsFile = file("app/version.properties")

    Properties versionProps = new Properties()

    versionProps.load(new FileInputStream(versionPropsFile))

    ext.version_major = 1
    ext.version_minor = 0
    ext.version_patch = versionProps["VERSION_PATCH"].toInteger() + versionPatchAndNumber
    ext.version_build = versionProps["VERSION_BUILD"].toInteger() + 1
    ext.version_number = versionProps["VERSION_NUMBER"].toInteger() + versionPatchAndNumber

    versionProps["VERSION_PATCH"] = version_patch.toString()
    versionProps["VERSION_BUILD"] = version_build.toString()
    versionProps["VERSION_NUMBER"] = version_number.toString()

    versionProps.store(versionPropsFile.newWriter(), null)

    repositories {
        google()
        jcenter()
        
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$rootProject.gradle_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$rootProject.kotlin_version"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
